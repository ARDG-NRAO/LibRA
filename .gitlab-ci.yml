stages:
  - build
  - test
  - production

variables:
  CCACHE_BASEDIR: $CI_PROJECT_DIR
  CCACHE_DIR: $CI_PROJECT_DIR/ccache
  GIT_CLEAN_FLAGS: none

cache:
  key: ccache_main
  paths:
    - $CCACHE_DIR


build-job:
  stage: build
  rules:
    - changes:
      - (exclude)README.md
      - (exclude)scripts/**/*
      - (exclude)doc/**/*
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /\[ci.skip\]/'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /\[ci build\]/ || $CI_COMMIT_MESSAGE =~ /\[ci.build\]/' 
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_REF_NAME == "main" && ($CI_COMMIT_MESSAGE =~ /\[ci build\]/ || $CI_COMMIT_MESSAGE =~ /\[ci.build\]/) && $CI_COMMIT_MESSAGE !~ /\[ci.skip\]/'
      when: always

  before_script:
    - export CCACHE_BASEDIR="$PWD"
    - export CCACHE_DIR="$PWD/ccache"
    - export CCACHE_COMPILERCHECK=content
    - ccache --zero-stats || true
    - ccache --show-stats || true
    - git clean -ffdx

  script:
    - echo "Compiling the code..."
    - echo $PATH
    - nvidia-smi
    - which nvcc
    - mkdir build
    - cd build
    - cmake -DApps_BUILD_TESTS=ON -DKokkos_CUDA_ARCH_NAME=Kokkos_ARCH_VOLTA70 ..
    - make
    - echo "Compile complete."
    
  after_script:
    - export CCACHE_DIR="$PWD/ccache"
    - ccache --show-stats || true

test-job:
  stage: test
  rules:
    - changes:
      - (exclude)README.md
      - (exclude)scripts/**/*
      - (exclude)doc/**/*
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /\[ci.skip\]/'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /\[ci build\]/ || $CI_COMMIT_MESSAGE =~ /\[ci.build\]/'
      when: always
    - if: '$CI_COMMIT_MESSAGE =~ /\[ci test\]/ || $CI_COMMIT_MESSAGE =~ /\[ci.test\]/'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_REF_NAME == "main" && ($CI_COMMIT_MESSAGE =~ /\[ci test\]/ || $CI_COMMIT_MESSAGE =~ /\[ci.test\]/) && ($CI_COMMIT_MESSAGE =~ /\[ci build\]/ || $CI_COMMIT_MESSAGE =~ /\[ci.build\]/) && $CI_COMMIT_MESSAGE !~ /\[ci.skip\]/'
      when: always

  script:
    - echo $PWD
    - base_path=$PWD
    - echo "Entering $PWD/apps/src/tests to run apps unit tests"
    - cd ${base_path}/apps/src/tests
    - ${base_path}/build/Libra/apps/src/tests/LibRATests --gtest_output="xml:report.xml"

  artifacts:
    when: always
    reports:
      junit: ${base_path}/build/Libra/apps/src/tests/report.xml

production-job:
  stage: production
  only:
    - manual
  script:
    - echo "Deploying to production..."
    # Add your deployment commands here
