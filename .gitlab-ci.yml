stages:
  - build
  - test

variables:
  CCACHE_BASEDIR: $CI_PROJECT_DIR
  CCACHE_DIR: $CI_PROJECT_DIR/ccache
  GIT_CLEAN_FLAGS: none

cache:
  key: ccache
  paths:
    - $CCACHE_DIR

build-job:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - changes:
        - (exclude)README.md
        - (exclude)scripts/**/*
        - (exclude)doc/**/*

  before_script:
    - export CCACHE_BASEDIR="$PWD"
    - export CCACHE_DIR="$PWD/ccache"
    - export CCACHE_COMPILERCHECK=content
    - if [ -d "$CCACHE_DIR" ] && [ "$(ls -A $CCACHE_DIR)" ]; then echo "Using existing ccache"; else echo "No active ccache found"; fi
    # - if [ -f "$CI_PROJECT_DIR/ccache.tar.gz" ]; then tar -xzf "$CI_PROJECT_DIR/ccache.tar.gz" -C $CCACHE_DIR; fi
    - mkdir -p $CCACHE_DIR
    # - ccache --zero-stats || true
    - ccache --show-stats || true
    - git clean -ffdx

  script:
    - echo "Compiling the code..."
    - echo $PATH
    - nvidia-smi
    - which nvcc
    - mkdir -p build
    - cd build
    - cmake -DApps_BUILD_TESTS=ON -DKokkos_CUDA_ARCH_NAME=Kokkos_ARCH_VOLTA70 ..
    - make

  after_script:
    - export CCACHE_DIR="$PWD/ccache"
    - ccache --show-stats || true
    # - tar -czf ${CCACHE_DIR}/ccache.tar.gz $CCACHE_DIR
    # - mv ${CCACHE_DIR}/ccache.tar.gz $CI_PROJECT_DIR/

  artifacts:
    paths:
      - build
      - install
      - ${CCACHE_DIR}
      # - ${CCACHE_DIR}/ccache.tar.gz

test-job:
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - changes:
        - (exclude)README.md
        - (exclude)scripts/**/*
        - (exclude)doc/**/*
      when: never

  dependencies:
    - build-job

  before_script:
    - export CCACHE_DIR="$PWD/ccache"
    - mkdir -p $CCACHE_DIR
    # - tar -xzf ${CCACHE_DIR}/ccache.tar.gz -C $CCACHE_DIR || true

  script:
    - echo $PWD
    - base_path=$PWD
    - echo "Entering $PWD/apps/src/tests to run apps unit tests"
    - cd ${base_path}/apps/src/tests
    - ${base_path}/install/bin/tests/LibRATests --gtest_output="xml:${base_path}/apps/src/tests/report.xml"
    - python -m pytest --junitxml=${base_path}/apps/src/tests/pytest_report.xml

  artifacts:
    when: always
    reports:
      junit:
        - ${base_path}/apps/src/tests/report.xml
        - ${base_path}/apps/src/tests/pytest_report.xml
    paths:
      - ${CCACHE_DIR}
      - ${base_path}/apps/src/tests/report.xml
      - ${base_path}/apps/src/tests/pytest_report.xml